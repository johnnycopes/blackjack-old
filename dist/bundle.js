!function(e){function t(n){if(a[n])return a[n].exports;var i=a[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var a={};t.m=e,t.c=a,t.d=function(e,a,n){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=2)}([function(e,t,a){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),s=a(1),l=(function(e){e&&e.__esModule}(s),function(){function e(t,a){n(this,e);var i=void 0;"dealer"===t?i="#dealer":"player"===t&&(1===a?i="#hand1":2===a&&(i="#hand2")),this.$wrapper=$(""+i),this.$hand=$(i+" .hand"),this.$points=$(i+" .points"),this.playing=!1,this.cards=[],this.outcome}return i(e,[{key:"addCard",value:function(e,t){this.cards.push(e),this.$hand.append(t)}},{key:"canSplit",value:function(){return this.cards[0].point===this.cards[1].point}},{key:"getPoints",value:function(){var e=0,t=0,a=!0,n=!1,i=void 0;try{for(var s,l=this.cards[Symbol.iterator]();!(a=(s=l.next()).done);a=!0){var r=s.value,o=r.point;for(1===o?(e+=10,t++):o>10&&(o=10),e+=o;e>21&&t>0;)e-=10,t--}}catch(e){n=!0,i=e}finally{try{!a&&l.return&&l.return()}finally{if(n)throw i}}return e}},{key:"removeCard",value:function(){return{card:this.cards.pop(),$card:this.$hand.find("img:last-child").remove()}}},{key:"revealHole",value:function(){this.$hand.find("img:first-child").attr("src",this.cards[0].getImageUrl())}},{key:"seeCard",value:function(e){return this.cards[e-1]}},{key:"toggleHighlight",value:function(){this.playing?this.$wrapper.addClass("currentHand"):this.$wrapper.removeClass("currentHand")}},{key:"updateDisplay",value:function(e){this.$points.text(e)}}]),e}());t.default=l},function(e,t,a){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),s=function(){function e(t,a){n(this,e),this.point=t,this.suit=a}return i(e,[{key:"getImageUrl",value:function(){var e=this.point;return 11===this.point?e="jack":12===this.point?e="queen":13===this.point?e="king":1===this.point&&(e="ace"),"images/"+e+"_of_"+this.suit+".svg"}}]),e}();t.default=s},function(e,t,a){"use strict";var n=a(3),i=function(e){return e&&e.__esModule?e:{default:e}}(n),s=new i.default;s.makeBet(),$(".deal").on("click",function(){s.resetGame(),s.gameDeck.generate(3),s.deal()}),$(".hit").on("click",function(){s.hit()}),$(".stand").on("click",function(){s.stand()}),$(".double-down").on("click",function(){s.doubleDown()}),$(".split").on("click",function(){s.split()})},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),l=a(0),r=n(l),o=a(4),u=n(o),h=a(5),d=n(h),c=function(){function e(){i(this,e),this.wallet=new d.default,this.gameDeck=new u.default,this.dealerHand=new r.default("dealer"),this.playerHand=new r.default("player",1),this.splitInPlay=!1,this.$total=$(".total"),this.$bet=$(".currentBet"),this.$change=$(".change"),this.$deal=$(".deal"),this.$hit=$(".hit"),this.$stand=$(".stand"),this.$doubleDown=$(".double-down"),this.$split=$(".split")}return s(e,[{key:"adjustSpace",value:function(){var e=void 0;e=this.splitInPlay?50:100,$(".playerHand-div").css("width",e+"%")}},{key:"calibrateSlider",value:function(){}},{key:"deal",value:function(){this.startGameMode(),this.gameDeck.shuffle(),this.dealOneCard(this.dealerHand,"hole"),this.dealOneCard(this.playerHand);var e=this.dealOneCard(this.dealerHand),t=this.dealOneCard(this.playerHand);this.dealerHand.updateDisplay("?"),21===e&&21===t?(this.updateMessage("Push"),this.dealerHand.updateDisplay("Blackjack"),this.playerHand.updateDisplay("BLACKJACK, HOT DAMN!")):21===e?(this.updateMessage("Dealer wins"),this.dealerHand.updateDisplay("Blackjack"),this.outcome("lose")):21===t?(this.updateMessage("You win!"),this.dealerHand.updateDisplay(e),this.playerHand.updateDisplay("BLACKJACK, HOT DAMN!"),this.outcome("blackjack")):this.wallet.money>2*this.wallet.bet&&(11===t&&this.enable(this.$doubleDown),this.playerHand.canSplit()&&this.enable(this.$split))}},{key:"dealOneCard",value:function(e,t){var a=this.gameDeck.draw(),n=$("<img />",{class:"card",src:""+a.getImageUrl()});return"hole"===t?n.attr("src","images/back-suits-red.svg"):"double-down"===t?n.addClass("card-dd"):"split"===t&&n.addClass("split"),e.addCard(a,n),e.updateDisplay(e.getPoints()),e.getPoints()}},{key:"dealerTurn",value:function(){var e=this;for(this.dealerHand.revealHole();this.dealerHand.getPoints()<17;)this.dealOneCard(this.dealerHand);for(var t=arguments.length,a=Array(t),n=0;n<t;n++)a[n]=arguments[n];a.forEach(function(t){t.outcome||e.evaluateHand(t)})}},{key:"disable",value:function(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=!0,i=!1,s=void 0;try{for(var l,r=t[Symbol.iterator]();!(n=(l=r.next()).done);n=!0){l.value.attr("disabled",!0)}}catch(e){i=!0,s=e}finally{try{!n&&r.return&&r.return()}finally{if(i)throw s}}}},{key:"doubleDown",value:function(){this.wallet.doubleBet(),this.dealOneCard(this.playerHand,"double-down"),this.stand()}},{key:"enable",value:function(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=!0,i=!1,s=void 0;try{for(var l,r=t[Symbol.iterator]();!(n=(l=r.next()).done);n=!0){l.value.attr("disabled",!1)}}catch(e){i=!0,s=e}finally{try{!n&&r.return&&r.return()}finally{if(i)throw s}}}},{key:"endGameMode",value:function(){this.playerHand.playing=!1,this.selectCurrentHand(this.playerHand),this.dealerHand.revealHole(),this.dealerHand.updateDisplay(this.dealerHand.getPoints()),this.wallet.update(),this.wallet.assessChange(),$(".betting .buttons").show(),this.enable(this.$deal),this.disable(this.$hit,this.$stand)}},{key:"evaluateHand",value:function(e){var t=this.dealerHand.getPoints(),a=e.getPoints();e.outcome=t>21||a>t?"win":a<t?"lose":"push"}},{key:"hit",value:function(){if(this.disable(this.$doubleDown,this.$split),this.splitInPlay){var e=this.selectCurrentHand(this.playerHand,this.playerHand2);this.dealOneCard(e,"split")>21&&(e===this.playerHand?(this.playerHand.outcome="lose",this.playerHand.playing=!1,this.playerHand2.playing=!0,this.selectCurrentHand(this.playerHand,this.playerHand2)):e===this.playerHand2&&(this.playerHand2.outcome="lose",this.playerHand2.playing=!1,this.selectCurrentHand(this.playerHand,this.playerHand2),this.invokeOutcome(this.playerHand,this.playerHand2)))}else{this.dealOneCard(this.playerHand)>21&&(this.updateMessage("You bust"),this.outcome("lose"))}}},{key:"invokeOutcome",value:function(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=t[0].outcome;1===t.length?("win"===n?this.updateMessage("You win!"):"lose"===n&&this.updateMessage("Dealer wins"),this.outcome(n)):2===t.length&&this.multipleOutcomes(t)}},{key:"makeBet",value:function(){var e=this;this.wallet.update(),$(".bet-btn").on("click",function(){var t=e.wallet.money-e.wallet.bet;$(this).hasClass("add10")&&t>=10?e.wallet.bet+=10:$(this).hasClass("add50")&&t>=50?e.wallet.bet+=50:$(this).hasClass("add100")&&t>=100?e.wallet.bet+=100:$(this).hasClass("add500")&&t>=500?e.wallet.bet+=500:$(this).hasClass("all-in")?e.wallet.bet=e.wallet.money:$(this).hasClass("reset")&&(e.wallet.bet=10),e.$bet.text(e.wallet.bet)})}},{key:"multipleOutcomes",value:function(e){var t=e[0].outcome,a=e[1].outcome;if(t===a)"blackjack"===t?this.updateMessage("TWO BLACKJACKS!!!"):"win"===t?this.updateMessage("You win both!"):"lose"===t?this.updateMessage("Dealer wins both"):this.updateMessage("Push both"),this.wallet.payout(t);else if(t!==a){var n=this.wallet.bet/2,i=0,s=0;"blackjack"===t||"blackjack"===a?(i=1.5*n,"win"===t||"win"===a?(s=n,this.updateMessage("You win both!")):"lose"===t||"lose"===a?(s=-n,this.updateMessage("You and dealer each win one")):this.updateMessage("You win one, push")):"win"===t||"win"===a?(i=n,"lose"===t||"lose"===a?(s=-n,this.updateMessage("You and dealer each win one")):this.updateMessage("You win one, push")):"lose"!==t&&"lose"!==a||(i=-n,this.updateMessage("Dealer wins one, push")),this.wallet.payout("custom",i,s)}this.splitInPlay=!1,this.endGameMode()}},{key:"modal",value:function(e){if("bankrupt"===e){var t=this;$(".modal, .modal-overlay").removeClass("hide"),$(".modal-guts button").on("click",function(){$(".modal, .modal-overlay").addClass("hide"),$(".title-screen").show(),t.resetGame(),t.wallet.reset()})}}},{key:"outcome",value:function(e){this.wallet.payout(e),"push"===e?this.updateMessage("Push"):"lose"===e&&this.wallet.money-this.wallet.bet<=0&&this.modal("bankrupt"),this.endGameMode()}},{key:"resetGame",value:function(){this.gameDeck=new u.default,this.dealerHand=new r.default("dealer"),this.playerHand=new r.default("player",1),$(".messages").empty(),$(".player-hand").empty(),$(".dealer-hand").empty(),$(".player-points").empty(),$(".dealer-points").empty(),$(".change").empty()}},{key:"selectCurrentHand",value:function(){for(var e=void 0,t=arguments.length,a=Array(t),n=0;n<t;n++)a[n]=arguments[n];var i=!0,s=!1,l=void 0;try{for(var r,o=a[Symbol.iterator]();!(i=(r=o.next()).done);i=!0){var u=r.value;u.toggleHighlight(),u.playing&&(e=u)}}catch(e){s=!0,l=e}finally{try{!i&&o.return&&o.return()}finally{if(s)throw l}}return e}},{key:"split",value:function(){this.splitInPlay=!0,this.disable(this.$split),this.wallet.doubleBet(),this.adjustSpace(),this.playerHand2=new r.default("player",2);var e=this.playerHand.removeCard();this.playerHand2.addCard(e.card,e.$card),this.dealOneCard(this.playerHand),this.dealOneCard(this.playerHand2)}},{key:"stand",value:function(){if(this.splitInPlay){var e=this.selectCurrentHand(this.playerHand,this.playerHand2);e===this.playerHand?(this.playerHand.playing=!1,this.playerHand2.playing=!0,this.selectCurrentHand(this.playerHand,this.playerHand2)):e===this.playerHand2&&(this.playerHand2.playing=!1,this.selectCurrentHand(this.playerHand,this.playerHand2),this.dealerTurn(this.playerHand,this.playerHand2),this.invokeOutcome(this.playerHand,this.playerHand2))}else this.disable(this.$hit,this.$stand,this.$doubleDown,this.$split),this.dealerTurn(this.playerHand),this.invokeOutcome(this.playerHand)}},{key:"startGameMode",value:function(){$(".title-screen").hide(),this.adjustSpace(),this.enable(this.$hit,this.$stand),this.disable(this.$deal),$(".betting .buttons").hide(),this.playerHand.playing=!0,this.selectCurrentHand(this.playerHand)}},{key:"updateMessage",value:function(e){$(".messages").append("<h1>"+e+"</h1>")}}]),e}();t.default=c},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),l=a(1),r=n(l),o=a(0),u=(n(o),function(){function e(){i(this,e),this.cards=[]}return s(e,[{key:"draw",value:function(){return this.cards.pop()}},{key:"generate",value:function(e){for(e||(e=1);e>0;){for(var t=1;t<=13;t++)this.cards.push(new r.default(t,"spades")),this.cards.push(new r.default(t,"diamonds")),this.cards.push(new r.default(t,"hearts")),this.cards.push(new r.default(t,"clubs"));e--}}},{key:"shuffle",value:function(){for(var e=this.cards.length-1;e>0;e--){var t=Math.floor(Math.random()*(e+1)),a=[this.cards[t]];this.cards[e]=a[0]}}}]),e}());t.default=u},function(e,t,a){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),s=function(){function e(){n(this,e),this.money=500,this.bet=10,this.change="",this.$total=$(".total"),this.$bet=$(".currentBet"),this.$change=$(".change")}return i(e,[{key:"assessChange",value:function(){var e="",t="";this.change>0?(e="positive",t="+"):this.change<0&&(e="negative",t="-"),this.$change.append('<span class="'+e+'">'+t+" $"+Math.abs(this.change)+"</span>")}},{key:"doubleBet",value:function(){this.money-=this.bet,this.bet*=2,this.update()}},{key:"payout",value:function(e,t,a){"blackjack"===e?this.change=1.5*this.bet:"win"===e?this.change=this.bet:"lose"===e?this.change=-this.bet:"push"===e?this.change=0:"multiple"===e&&(this.change=t+a),this.money+=this.change}},{key:"reset",value:function(){this.money=500,this.bet=10,this.change="",this.update()}},{key:"update",value:function(){this.$total.text(this.money),this.$bet.text(this.bet)}}]),e}();t.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,