!function(t){function n(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}var e={};n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=2)}([function(t,n,e){"use strict";function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),r=e(1),o=(function(t){t&&t.__esModule}(r),function(){function t(n,e){i(this,t);var a=void 0;"dealer"===n?a="#dealer":"player"===n&&(1===e?a="#hand1":2===e&&(a="#hand2")),this.$wrapper=$(""+a),this.$hand=$(a+" .hand"),this.$points=$(a+" .points"),this.playing=!1,this.cards=[],this.outcome}return a(t,[{key:"addCard",value:function(t,n){this.cards.push(t),this.$hand.append(n)}},{key:"canSplit",value:function(){return this.cards[0].point===this.cards[1].point}},{key:"getPoints",value:function(){var t=0,n=0,e=!0,i=!1,a=void 0;try{for(var r,o=this.cards[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var s=r.value,l=s.point;for(1===l?(t+=10,n++):l>10&&(l=10),t+=l;t>21&&n>0;)t-=10,n--}}catch(t){i=!0,a=t}finally{try{!e&&o.return&&o.return()}finally{if(i)throw a}}return t}},{key:"removeCard",value:function(){return{card:this.cards.pop(),$card:this.$hand.find("img:last-child").remove()}}},{key:"revealHole",value:function(){this.$hand.find("img:first-child").attr("src",this.cards[0].getImageUrl())}},{key:"seeCard",value:function(t){return this.cards[t-1]}},{key:"toggleHighlight",value:function(){this.playing?this.$wrapper.addClass("currentHand"):this.$wrapper.removeClass("currentHand")}},{key:"updateDisplay",value:function(t){this.$points.text(t)}}]),t}());n.default=o},function(t,n,e){"use strict";function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),r=function(){function t(n,e){i(this,t),this.point=n,this.suit=e}return a(t,[{key:"getImageUrl",value:function(){var t=this.point;return 11===this.point?t="jack":12===this.point?t="queen":13===this.point?t="king":1===this.point&&(t="ace"),"img/"+t+"_of_"+this.suit+".svg"}}]),t}();n.default=r},function(t,n,e){"use strict";e(3),e(7),e(12),e(13),e(14),e(15),e(16),e(17),e(18),e(19),e(20),e(21),e(22),e(23),e(24),e(25),e(26),e(27),e(28),e(29),e(30),e(31),e(32),e(33),e(34),e(35),e(36),e(37),e(38),e(39),e(40),e(41),e(42),e(43),e(44),e(45),e(46),e(47),e(48),e(49),e(50),e(51),e(52),e(53),e(54),e(55),e(56),e(57),e(58),e(59),e(60),e(61),e(62),e(63),e(64)},function(t,n,e){"use strict";var i=e(4),a=function(t){return t&&t.__esModule?t:{default:t}}(i),r=new a.default;r.makeBet(),$(".deal").on("click",function(){r.resetGame(),r.gameDeck.generate(3),r.deal()}),$(".hit").on("click",function(){r.hit()}),$(".stand").on("click",function(){r.stand()}),$(".double-down").on("click",function(){r.doubleDown()}),$(".split").on("click",function(){r.split()})},function(t,n,e){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}function a(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),o=e(0),s=i(o),l=e(5),d=i(l),h=e(6),c=i(h),A=function(){function t(){a(this,t),this.wallet=new c.default,this.gameDeck=new d.default,this.dealerHand=new s.default("dealer"),this.playerHand=new s.default("player",1),this.splitInPlay=!1,this.$total=$(".total"),this.$bet=$(".currentBet"),this.$change=$(".change"),this.$deal=$(".deal"),this.$hit=$(".hit"),this.$stand=$(".stand"),this.$doubleDown=$(".double-down"),this.$split=$(".split")}return r(t,[{key:"adjustSpace",value:function(){var t=void 0;t=this.splitInPlay?50:100,$(".playerHand-div").css("width",t+"%")}},{key:"calibrateSlider",value:function(){}},{key:"deal",value:function(){this.startGameMode(),this.gameDeck.shuffle(),this.dealOneCard(this.dealerHand,"hole"),this.dealOneCard(this.playerHand);var t=this.dealOneCard(this.dealerHand),n=this.dealOneCard(this.playerHand);this.dealerHand.updateDisplay("?"),21===t&&21===n?(this.updateMessage("Push"),this.dealerHand.updateDisplay("Blackjack"),this.playerHand.updateDisplay("BLACKJACK, HOT DAMN!")):21===t?(this.updateMessage("Dealer wins"),this.dealerHand.updateDisplay("Blackjack"),this.outcome("lose")):21===n?(this.updateMessage("You win!"),this.dealerHand.updateDisplay(t),this.playerHand.updateDisplay("BLACKJACK, HOT DAMN!"),this.outcome("blackjack")):this.wallet.money>2*this.wallet.bet&&(11===n&&this.enable(this.$doubleDown),this.playerHand.canSplit()&&this.enable(this.$split))}},{key:"dealOneCard",value:function(t,n){var e=this.gameDeck.draw(),i=$("<img />",{class:"card",src:""+e.getImageUrl()});return"hole"===n?i.attr("src","img/back-suits-red.svg"):"double-down"===n?i.addClass("card-dd"):"split"===n&&i.addClass("split"),t.addCard(e,i),t.updateDisplay(t.getPoints()),t.getPoints()}},{key:"dealerTurn",value:function(){var t=this;for(this.dealerHand.revealHole();this.dealerHand.getPoints()<17;)this.dealOneCard(this.dealerHand);for(var n=arguments.length,e=Array(n),i=0;i<n;i++)e[i]=arguments[i];e.forEach(function(n){n.outcome||t.evaluateHand(n)})}},{key:"disable",value:function(){for(var t=arguments.length,n=Array(t),e=0;e<t;e++)n[e]=arguments[e];var i=!0,a=!1,r=void 0;try{for(var o,s=n[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){o.value.attr("disabled",!0)}}catch(t){a=!0,r=t}finally{try{!i&&s.return&&s.return()}finally{if(a)throw r}}}},{key:"doubleDown",value:function(){this.wallet.doubleBet(),this.dealOneCard(this.playerHand,"double-down"),this.stand()}},{key:"enable",value:function(){for(var t=arguments.length,n=Array(t),e=0;e<t;e++)n[e]=arguments[e];var i=!0,a=!1,r=void 0;try{for(var o,s=n[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){o.value.attr("disabled",!1)}}catch(t){a=!0,r=t}finally{try{!i&&s.return&&s.return()}finally{if(a)throw r}}}},{key:"endGameMode",value:function(){this.playerHand.playing=!1,this.selectCurrentHand(this.playerHand),this.dealerHand.revealHole(),this.dealerHand.updateDisplay(this.dealerHand.getPoints()),this.wallet.update(),this.wallet.assessChange(),$(".betting .buttons").show(),this.enable(this.$deal),this.disable(this.$hit,this.$stand)}},{key:"evaluateHand",value:function(t){var n=this.dealerHand.getPoints(),e=t.getPoints();t.outcome=n>21||e>n?"win":e<n?"lose":"push"}},{key:"hit",value:function(){if(this.disable(this.$doubleDown,this.$split),this.splitInPlay){var t=this.selectCurrentHand(this.playerHand,this.playerHand2);this.dealOneCard(t,"split")>21&&(t===this.playerHand?(this.playerHand.outcome="lose",this.playerHand.playing=!1,this.playerHand2.playing=!0,this.selectCurrentHand(this.playerHand,this.playerHand2)):t===this.playerHand2&&(this.playerHand2.outcome="lose",this.playerHand2.playing=!1,this.selectCurrentHand(this.playerHand,this.playerHand2),this.invokeOutcome(this.playerHand,this.playerHand2)))}else{this.dealOneCard(this.playerHand)>21&&(this.updateMessage("You bust"),this.outcome("lose"))}}},{key:"invokeOutcome",value:function(){for(var t=arguments.length,n=Array(t),e=0;e<t;e++)n[e]=arguments[e];var i=n[0].outcome;1===n.length?("win"===i?this.updateMessage("You win!"):"lose"===i&&this.updateMessage("Dealer wins"),this.outcome(i)):2===n.length&&this.multipleOutcomes(n)}},{key:"makeBet",value:function(){var t=this;this.wallet.update(),$(".bet-btn").on("click",function(){var n=t.wallet.money-t.wallet.bet;$(this).hasClass("add10")&&n>=10?t.wallet.bet+=10:$(this).hasClass("add50")&&n>=50?t.wallet.bet+=50:$(this).hasClass("add100")&&n>=100?t.wallet.bet+=100:$(this).hasClass("add500")&&n>=500?t.wallet.bet+=500:$(this).hasClass("all-in")?t.wallet.bet=t.wallet.money:$(this).hasClass("reset")&&(t.wallet.bet=10),t.$bet.text(t.wallet.bet)})}},{key:"multipleOutcomes",value:function(t){var n=t[0].outcome,e=t[1].outcome;if(n===e)"blackjack"===n?this.updateMessage("TWO BLACKJACKS!!!"):"win"===n?this.updateMessage("You win both!"):"lose"===n?this.updateMessage("Dealer wins both"):this.updateMessage("Push both"),this.wallet.payout(n);else if(n!==e){var i=this.wallet.bet/2,a=0,r=0;"blackjack"===n||"blackjack"===e?(a=1.5*i,"win"===n||"win"===e?(r=i,this.updateMessage("You win both!")):"lose"===n||"lose"===e?(r=-i,this.updateMessage("You and dealer each win one")):this.updateMessage("You win one, push")):"win"===n||"win"===e?(a=i,"lose"===n||"lose"===e?(r=-i,this.updateMessage("You and dealer each win one")):this.updateMessage("You win one, push")):"lose"!==n&&"lose"!==e||(a=-i,this.updateMessage("Dealer wins one, push")),this.wallet.payout("custom",a,r)}this.splitInPlay=!1,this.endGameMode()}},{key:"modal",value:function(t){if("bankrupt"===t){var n=this;$(".modal, .modal-overlay").removeClass("hide"),$(".modal-guts button").on("click",function(){$(".modal, .modal-overlay").addClass("hide"),$(".title-screen").show(),n.resetGame(),n.wallet.reset()})}}},{key:"outcome",value:function(t){this.wallet.payout(t),"push"===t?this.updateMessage("Push"):"lose"===t&&this.wallet.money-this.wallet.bet<=0&&this.modal("bankrupt"),this.endGameMode()}},{key:"resetGame",value:function(){this.gameDeck=new d.default,this.dealerHand=new s.default("dealer"),this.playerHand=new s.default("player",1),$(".messages").empty(),$(".player-hand").empty(),$(".dealer-hand").empty(),$(".player-points").empty(),$(".dealer-points").empty(),$(".change").empty()}},{key:"selectCurrentHand",value:function(){for(var t=void 0,n=arguments.length,e=Array(n),i=0;i<n;i++)e[i]=arguments[i];var a=!0,r=!1,o=void 0;try{for(var s,l=e[Symbol.iterator]();!(a=(s=l.next()).done);a=!0){var d=s.value;d.toggleHighlight(),d.playing&&(t=d)}}catch(t){r=!0,o=t}finally{try{!a&&l.return&&l.return()}finally{if(r)throw o}}return t}},{key:"split",value:function(){this.splitInPlay=!0,this.disable(this.$split),this.wallet.doubleBet(),this.adjustSpace(),this.playerHand2=new s.default("player",2);var t=this.playerHand.removeCard();this.playerHand2.addCard(t.card,t.$card),this.dealOneCard(this.playerHand),this.dealOneCard(this.playerHand2)}},{key:"stand",value:function(){if(this.splitInPlay){var t=this.selectCurrentHand(this.playerHand,this.playerHand2);t===this.playerHand?(this.playerHand.playing=!1,this.playerHand2.playing=!0,this.selectCurrentHand(this.playerHand,this.playerHand2)):t===this.playerHand2&&(this.playerHand2.playing=!1,this.selectCurrentHand(this.playerHand,this.playerHand2),this.dealerTurn(this.playerHand,this.playerHand2),this.invokeOutcome(this.playerHand,this.playerHand2))}else this.disable(this.$hit,this.$stand,this.$doubleDown,this.$split),this.dealerTurn(this.playerHand),this.invokeOutcome(this.playerHand)}},{key:"startGameMode",value:function(){$(".title-screen").hide(),this.adjustSpace(),this.enable(this.$hit,this.$stand),this.disable(this.$deal),$(".betting .buttons").hide(),this.playerHand.playing=!0,this.selectCurrentHand(this.playerHand)}},{key:"updateMessage",value:function(t){$(".messages").append("<h1>"+t+"</h1>")}}]),t}();n.default=A},function(t,n,e){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}function a(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),o=e(1),s=i(o),l=e(0),d=(i(l),function(){function t(){a(this,t),this.cards=[]}return r(t,[{key:"draw",value:function(){return this.cards.pop()}},{key:"generate",value:function(t){for(t||(t=1);t>0;){for(var n=1;n<=13;n++)this.cards.push(new s.default(n,"spades")),this.cards.push(new s.default(n,"diamonds")),this.cards.push(new s.default(n,"hearts")),this.cards.push(new s.default(n,"clubs"));t--}}},{key:"shuffle",value:function(){for(var t=this.cards.length-1;t>0;t--){var n=Math.floor(Math.random()*(t+1)),e=[this.cards[n]];this.cards[t]=e[0]}}}]),t}());n.default=d},function(t,n,e){"use strict";function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),r=function(){function t(){i(this,t),this.money=500,this.bet=10,this.change="",this.$total=$(".total"),this.$bet=$(".currentBet"),this.$change=$(".change")}return a(t,[{key:"assessChange",value:function(){var t="",n="";this.change>0?(t="positive",n="+"):this.change<0&&(t="negative",n="-"),this.$change.append('<span class="'+t+'">'+n+" $"+Math.abs(this.change)+"</span>")}},{key:"doubleBet",value:function(){this.money-=this.bet,this.bet*=2,this.update()}},{key:"payout",value:function(t,n,e){"blackjack"===t?this.change=1.5*this.bet:"win"===t?this.change=this.bet:"lose"===t?this.change=-this.bet:"push"===t?this.change=0:"multiple"===t&&(this.change=n+e),this.money+=this.change}},{key:"reset",value:function(){this.money=500,this.bet=10,this.change="",this.update()}},{key:"update",value:function(){this.$total.text(this.money),this.$bet.text(this.bet)}}]),t}();n.default=r},function(t,n,e){var i=e(8);"string"==typeof i&&(i=[[t.i,i,""]]);var a={hmr:!0};a.transform=void 0;e(10)(i,a);i.locals&&(t.exports=i.locals)},function(t,n,e){n=t.exports=e(9)(!0),n.push([t.i,'*{box-sizing:border-box}body,html{height:100%;font-size:80%}body{margin:0;min-height:550px;background-color:#8c0002;font-family:Ek Mukta,sans-serif;font-weight:300;font-size:1rem;color:#fcfee5}main{height:100%;text-align:center}h1,h2,h3,h4,h5,h6{margin:0;font-weight:300}h1{margin:10px 0}table{margin-bottom:10px;width:100%;border-collapse:collapse;text-align:center}td{width:50%;height:1.5rem}button{display:inline-block;padding:5px;width:49%;font-family:Ek Mukta,sans-serif;font-size:1rem;font-weight:300;background:#fcfee5;color:#060605;border:4px solid #ba7619;outline:none}button:hover{cursor:pointer;text-decoration:underline}button:active{outline:none}button[disabled],button[disabled]:hover{border:4px solid #8c0002;color:transparent;text-shadow:0 0 5px rgba(6,6,5,.5);cursor:default;text-decoration:none;position:relative}button[disabled]:after{content:"";position:absolute;top:0;left:0;width:100%;height:100%;background:#060605;opacity:.3}.fl{float:left}.fr{float:right}.cf:after{content:"";display:block;clear:both}.positive{color:#2ff31c}.negative{color:#fb0007}.container{margin:0 auto;width:100%;height:100%;display:flex;flex-direction:column;justify-content:center;justify-content:space-around}.messages{height:66px;display:flex;align-items:center;justify-content:center}.table{position:relative}.title-screen{position:absolute;width:100%;z-index:1;text-align:center}.title-screen h1{font-size:5rem}.title-screen .instructions{width:50%;float:left}.dealer,.player{width:100%;height:160px}.dealerHand-div,.playerHand-div{width:100%;text-align:center;position:relative;float:left}.dealer-hand,.player-hand{margin:0 auto;position:relative;height:110px;width:70%}.currentHand:after{content:"";top:0;left:0;width:100%;opacity:.15;border-radius:10px;background:#fff}.card,.currentHand:after{position:absolute;height:100%}.card{right:-50%}.card-dd{transform:rotate(45deg);left:40px!important}.card:first-child{left:0}.card:nth-child(2){left:40px}.card:nth-child(3){left:80px}.card:nth-child(4){left:120px}.card:nth-child(5){left:160px}.card:nth-child(6){left:200px}.card:nth-child(7){left:240px}.card:nth-child(8){left:280px}.card:nth-child(9){left:320px}.card.split{left:0}.card.split:nth-child(2){left:10px}.card.split:nth-child(3){left:20px}.card.split:nth-child(4){left:30px}.card.split:nth-child(5){left:40px}.card.split:nth-child(6){left:50px}.card.split:nth-child(7){left:60px}.card.split:nth-child(8){left:70px}.card.split:nth-child(9){left:80px}.action-wrap{margin:0 auto;width:95%}.betting,.game-actions{width:50%;float:left}.actions .container,.money .container{margin:0 auto;max-width:400px;width:80%}.deal{margin:0 auto;display:block;width:100%}.row{margin-bottom:5px;position:relative}.money h3{display:inline-block}.modal{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);max-width:500px;max-height:500px;height:90%;width:90%;z-index:2}.modal-guts{background:#fcfee5;color:#060605;overflow:auto;display:flex;flex-direction:column;align-items:center;justify-content:center}.modal-guts,.modal-overlay{position:absolute;top:0;left:0;width:100%;height:100%}.modal-overlay{background:#060605;z-index:1;opacity:.5}.hide{display:none}@media screen and (min-width:480px){html{font-size:100%}body{min-height:600px!important}.action-wrap,.container{width:90%}.dealer-hand,.player-hand{height:150px;width:50%}}@media screen and (min-width:768px){html{font-size:125%}body{min-height:700px}.dealer,.player{height:200px;width:50%;float:left;display:flex;align-items:center}.dealer-hand,.player-hand{height:200px;width:90%}.action-wrap{margin:0 auto;width:80%}}@media screen and (min-width:960px){.container{width:80%}.dealer-hand,.player-hand{height:200px;width:80%}}@media screen and (min-width:1200px){body{min-height:950px}.container{width:70%}.dealer,.player{height:260px}.dealer-hand,.player-hand{height:250px;width:80%}.card-dd{left:50px!important}.card:first-child{left:0}.card:nth-child(2){left:50px}.card:nth-child(3){left:100px}.card:nth-child(4){left:150px}.card:nth-child(5){left:200px}.card:nth-child(6){left:250px}.card:nth-child(7){left:300px}.card:nth-child(8){left:350px}.card:nth-child(9){left:400px}}@media screen and (min-width:1600px){html{font-size:150%}button{padding:15px}.container{max-width:1400px}.messages{height:75px}.dealer-hand,.player-hand{height:300px;width:60%}.card-dd{left:70px!important}.card:first-child{left:0}.card:nth-child(2){left:70px}.card:nth-child(3){left:140px}.card:nth-child(4){left:210px}.card:nth-child(5){left:280px}.card:nth-child(6){left:350px}.card:nth-child(7){left:420px}.card:nth-child(8){left:490px}.card:nth-child(9){left:560px}.action-wrap{width:70%}}',"",{version:3,sources:["C:/Source/Dev/Projects/blackjack/src/scss/src/scss/main.scss"],names:[],mappings:"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",file:"main.scss",sourcesContent:['$red: #FB0007;\n$darkRed: #8C0002;\n$white: #FCFEE5;\n$black: #060605;\n$brown: #BA7619;\n$gray: #787878;\n\n$positive: #2ff31c;\n$negative: #FB0007;\n// $neutral:\n\n* {\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  font-size: 80%;\n}\n\nbody {\n  margin: 0;\n  min-height: 550px;\n  background-color: $darkRed;\n  // background-image: url(../images/img-noise-361x370.png);\n  font-family: \'Ek Mukta\', sans-serif;\n  font-weight: 300;\n  font-size: 1rem;\n  color: $white;\n}\n\nmain {\n  height: 100%;\n  text-align: center;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n  font-weight: 300;\n}\n\nh1 {\n  margin: 10px 0;\n}\n\ntable {\n  margin-bottom: 10px;\n  width: 100%;\n  border-collapse: collapse;\n  text-align: center;\n}\n\ntd {\n  width: 50%;\n  height: 1.5rem;\n}\n\nbutton {\n  display: inline-block;\n  padding: 5px;\n  width: 49%;\n  font-family: \'Ek Mukta\', sans-serif;\n  font-size: 1rem;\n  font-weight: 300;\n  background: $white;\n  color: $black;\n  border: 4px solid $brown;\n  outline: none;\n}\n\nbutton:hover {\n  cursor: pointer;\n  text-decoration: underline;\n}\n\nbutton:active {\n  outline: none;\n}\n\nbutton[disabled],\nbutton[disabled]:hover {\n  border: 4px solid $darkRed;\n  color: transparent;\n  text-shadow: 0 0 5px rgba(6,6,5,0.5);\n  // opacity: 0.7;\n  cursor: default;\n  text-decoration: none;\n  position: relative;\n}\n\nbutton[disabled]::after {\n  content: "";\n  position: absolute;\n  top: 0%;\n  left: 0%;\n  width: 100%;\n  height: 100%;\n  background: $black;\n  opacity: 0.3;\n}\n\n.fl { float: left; }\n.fr { float: right; }\n\n.cf::after {\n  content: "";\n  display: block;\n  clear: both;\n}\n\n.positive { color: $positive; }\n.negative { color: $negative; }\n// .neutral { color: $neutral; }\n\n.container {\n  margin: 0 auto;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  justify-content: space-around;\n}\n\n.messages {\n  height: 66px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.table {\n  position: relative;\n}\n\n.title-screen {\n  position: absolute;\n  width: 100%;\n  z-index: 1;\n  text-align: center;\n}\n\n  .title-screen h1 {\n    font-size: 5rem;\n  }\n\n  .title-screen .instructions {\n    width: 50%;\n    float: left;\n  }\n\n.dealer,\n.player {\n  width: 100%;\n  height: 160px;\n}\n\n.dealerHand-div,\n.playerHand-div {\n  width: 100%;\n  text-align: center;\n  position: relative;\n  float: left;\n}\n\n.dealer-hand,\n.player-hand {\n  margin: 0 auto;\n  position: relative;\n  height: 110px;\n  width: 70%;\n}\n\n.currentHand::after {\n  content: "";\n  top: 0;\n  left: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  opacity: 0.15;\n  border-radius: 10px;\n  background: #fff;\n}\n\n.card {\n  height: 100%;\n  position: absolute;\n  right: -50%;\n}\n\n.card-dd {\n  transform: rotate(45deg);\n  left: 40px !important\n}\n\n.card:first-child { left: 0; }\n.card:nth-child(2) { left: 40px; }\n.card:nth-child(3) { left: 80px; }\n.card:nth-child(4) { left: 120px; }\n.card:nth-child(5) { left: 160px; }\n.card:nth-child(6) { left: 200px; }\n.card:nth-child(7) { left: 240px; }\n.card:nth-child(8) { left: 280px; }\n.card:nth-child(9) { left: 320px; }\n\n.card.split {\n  left: 0;\n}\n\n.card.split:nth-child(2) { left: 10px; }\n.card.split:nth-child(3) { left: 20px; }\n.card.split:nth-child(4) { left: 30px; }\n.card.split:nth-child(5) { left: 40px; }\n.card.split:nth-child(6) { left: 50px; }\n.card.split:nth-child(7) { left: 60px; }\n.card.split:nth-child(8) { left: 70px; }\n.card.split:nth-child(9) { left: 80px; }\n\n.action-wrap {\n  margin: 0 auto;\n  width: 95%;\n}\n\n.betting,\n.game-actions {\n  width: 50%;\n  float: left;\n}\n\n.actions .container,\n.money .container {\n  margin: 0 auto;\n  max-width: 400px;\n  width: 80%;\n}\n\n.deal {\n  margin: 0 auto;\n  display: block;\n  width: 100%;\n}\n\n.row {\n  margin-bottom: 5px;\n  position: relative;\n}\n\n.money h3 {\n  display: inline-block;\n}\n\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  max-width: 500px;\n  max-height: 500px;\n  height: 90%;\n  width: 90%;\n  z-index: 2;\n}\n\n.modal-guts {\n  position: absolute;\n  background: $white;\n  color: $black;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-overlay {\n  position: absolute;\n  background: $black;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  opacity: 0.5;\n}\n\n.hide {\n  display: none;\n}\n\n\n\n/*-------------------------------\nMEDIA QUERIES\n-------------------------------*/\n\n@media screen and (min-width: 480px) {\n\n  html {\n    font-size: 100%;\n  }\n\n  body {\n    min-height: 600px !important;\n  }\n\n  .container {\n    width: 90%;\n  }\n\n  .action-wrap {\n    width: 90%;\n  }\n\n  .dealer-hand,\n  .player-hand {\n    height: 150px;\n    width: 50%;\n  }\n\n}\n\n\n@media screen and (min-width: 768px) {\n\n  html {\n    font-size: 125%;\n  }\n\n  body {\n    min-height: 700px;\n  }\n\n  .dealer,\n  .player {\n    height: 200px;\n    width: 50%;\n    float: left;\n    display: flex;\n    align-items: center;\n  }\n\n  .dealer-hand,\n  .player-hand {\n    height: 200px;\n    width: 90%;\n  }\n\n  .action-wrap {\n    margin: 0 auto;\n    width: 80%;\n  }\n\n}\n\n@media screen and (min-width: 960px) {\n\n  .container {\n    width: 80%;\n  }\n\n  .dealer-hand,\n  .player-hand {\n    height: 200px;\n    width: 80%;\n  }\n\n}\n\n@media screen and (min-width: 1200px) {\n\n  body {\n    min-height: 950px;\n  }\n\n  .container {\n    width: 70%;\n  }\n\n  .dealer,\n  .player {\n    height: 260px;\n  }\n\n  .dealer-hand,\n  .player-hand {\n    height: 250px;\n    width: 80%;\n  }\n\n  .card-dd {\n    left: 50px !important\n  }\n\n  .card:first-child { left: 0; }\n  .card:nth-child(2) { left: 50px; }\n  .card:nth-child(3) { left: 100px; }\n  .card:nth-child(4) { left: 150px; }\n  .card:nth-child(5) { left: 200px; }\n  .card:nth-child(6) { left: 250px; }\n  .card:nth-child(7) { left: 300px; }\n  .card:nth-child(8) { left: 350px; }\n  .card:nth-child(9) { left: 400px; }\n\n}\n\n@media screen and (min-width: 1600px) {\n\n  html {\n    font-size: 150%;\n  }\n\n  button {\n    padding: 15px;\n  }\n\n  .container {\n    max-width: 1400px;\n  }\n\n  .messages {\n    height: 75px;\n  }\n\n  .dealer-hand,\n  .player-hand {\n    height: 300px;\n    width: 60%;\n  }\n\n  .card-dd {\n    left: 70px !important\n  }\n\n  .card:first-child { left: 0; }\n  .card:nth-child(2) { left: 70px; }\n  .card:nth-child(3) { left: 140px; }\n  .card:nth-child(4) { left: 210px; }\n  .card:nth-child(5) { left: 280px; }\n  .card:nth-child(6) { left: 350px; }\n  .card:nth-child(7) { left: 420px; }\n  .card:nth-child(8) { left: 490px; }\n  .card:nth-child(9) { left: 560px; }\n\n  .action-wrap {\n    width: 70%;\n  }\n\n}\n'],sourceRoot:""}])},function(t,n){function e(t,n){var e=t[1]||"",a=t[3];if(!a)return e;if(n&&"function"==typeof btoa){var r=i(a);return[e].concat(a.sources.map(function(t){return"/*# sourceURL="+a.sourceRoot+t+" */"})).concat([r]).join("\n")}return[e].join("\n")}function i(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var i=e(n,t);return n[2]?"@media "+n[2]+"{"+i+"}":i}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},a=0;a<this.length;a++){var r=this[a][0];"number"==typeof r&&(i[r]=!0)}for(a=0;a<t.length;a++){var o=t[a];"number"==typeof o[0]&&i[o[0]]||(e&&!o[2]?o[2]=e:e&&(o[2]="("+o[2]+") and ("+e+")"),n.push(o))}},n}},function(t,n,e){function i(t,n){for(var e=0;e<t.length;e++){var i=t[e],a=u[i.id];if(a){a.refs++;for(var r=0;r<a.parts.length;r++)a.parts[r](i.parts[r]);for(;r<i.parts.length;r++)a.parts.push(h(i.parts[r],n))}else{for(var o=[],r=0;r<i.parts.length;r++)o.push(h(i.parts[r],n));u[i.id]={id:i.id,refs:1,parts:o}}}}function a(t,n){for(var e=[],i={},a=0;a<t.length;a++){var r=t[a],o=n.base?r[0]+n.base:r[0],s=r[1],l=r[2],d=r[3],h={css:s,media:l,sourceMap:d};i[o]?i[o].parts.push(h):e.push(i[o]={id:o,parts:[h]})}return e}function r(t,n){var e=C(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=y[y.length-1];if("top"===t.insertAt)i?i.nextSibling?e.insertBefore(n,i.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),y.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=C(t.insertInto+" "+t.insertAt.before);e.insertBefore(n,a)}}function o(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=y.indexOf(t);n>=0&&y.splice(n,1)}function s(t){var n=document.createElement("style");return t.attrs.type="text/css",d(n,t.attrs),r(t,n),n}function l(t){var n=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",d(n,t.attrs),r(t,n),n}function d(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function h(t,n){var e,i,a,r;if(n.transform&&t.css){if(!(r=n.transform(t.css)))return function(){};t.css=r}if(n.singleton){var d=m++;e=g||(g=s(n)),i=c.bind(null,e,d,!1),a=c.bind(null,e,d,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=l(n),i=p.bind(null,e,n),a=function(){o(e),e.href&&URL.revokeObjectURL(e.href)}):(e=s(n),i=A.bind(null,e),a=function(){o(e)});return i(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;i(t=n)}else a()}}function c(t,n,e,i){var a=e?"":i.css;if(t.styleSheet)t.styleSheet.cssText=b(n,a);else{var r=document.createTextNode(a),o=t.childNodes;o[n]&&t.removeChild(o[n]),o.length?t.insertBefore(r,o[n]):t.appendChild(r)}}function A(t,n){var e=n.css,i=n.media;if(i&&t.setAttribute("media",i),t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}function p(t,n,e){var i=e.css,a=e.sourceMap,r=void 0===n.convertToAbsoluteUrls&&a;(n.convertToAbsoluteUrls||r)&&(i=v(i)),a&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([i],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}var u={},f=function(t){var n;return function(){return void 0===n&&(n=t.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),C=function(t){var n={};return function(e){if(void 0===n[e]){var i=t.call(this,e);if(i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}n[e]=i}return n[e]}}(function(t){return document.querySelector(t)}),g=null,m=0,y=[],v=e(11);t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");n=n||{},n.attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||(n.singleton=f()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=a(t,n);return i(e,n),function(t){for(var r=[],o=0;o<e.length;o++){var s=e[o],l=u[s.id];l.refs--,r.push(l)}if(t){i(a(t,n),n)}for(var o=0;o<r.length;o++){var l=r[o];if(0===l.refs){for(var d=0;d<l.parts.length;d++)l.parts[d]();delete u[l.id]}}}};var b=function(){var t=[];return function(n,e){return t[n]=e,t.filter(Boolean).join("\n")}}()},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,i=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var a=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(a))return t;var r;return r=0===a.indexOf("//")?a:0===a.indexOf("/")?e+a:i+a.replace(/^\.\//,""),"url("+JSON.stringify(r)+")"})}},function(t,n,e){t.exports=e.p+"img/2_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/2_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/2_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/2_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/3_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/3_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/3_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/3_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/4_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/4_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/4_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/4_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/5_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/5_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/5_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/5_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/6_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/6_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/6_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/6_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/7_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/7_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/7_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/7_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/8_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/8_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/8_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/8_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/9_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/9_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/9_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/9_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/10_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/10_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/10_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/10_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/jack_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/jack_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/jack_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/jack_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/queen_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/queen_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/queen_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/queen_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/king_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/king_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/king_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/king_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/ace_of_clubs.svg"},function(t,n,e){t.exports=e.p+"img/ace_of_hearts.svg"},function(t,n,e){t.exports=e.p+"img/ace_of_spades.svg"},function(t,n,e){t.exports=e.p+"img/ace_of_diamonds.svg"},function(t,n,e){t.exports=e.p+"img/back-suits-red.svg"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,